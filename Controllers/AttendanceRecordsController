using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using AttendanceApp.Data;
using AttendanceApp.Models;
using Microsoft.EntityFrameworkCore;

namespace AttendanceApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize] // Gunakan JWT token
    public class AttendanceRecordsController : ControllerBase
    {
        private readonly AppDbContext _context;

        public AttendanceRecordsController(AppDbContext context)
        {
            _context = context;
        }

        [HttpGet]
        public async Task<ActionResult<IEnumerable<AttendanceRecord>>> GetAll()
        {
            return await _context.AttendanceRecords
                .Include(r => r.Employee)
                .ToListAsync();
        }

        [HttpGet("{id}")]
        public async Task<ActionResult<AttendanceRecord>> Get(int id)
        {
            var record = await _context.AttendanceRecords
                .Include(r => r.Employee)
                .FirstOrDefaultAsync(r => r.AttendanceRecordId == id);

            if (record == null) return NotFound();
            return record;
        }

        [HttpPost]
        public async Task<ActionResult<AttendanceRecord>> Create(AttendanceRecord record)
        {
            record.CheckInTime = DateTime.UtcNow;
            _context.AttendanceRecords.Add(record);
            await _context.SaveChangesAsync();
            return CreatedAtAction(nameof(Get), new { id = record.AttendanceRecordId }, record);
        }

        [HttpPut("{id}/checkout")]
        public async Task<IActionResult> CheckOut(int id)
        {
            var record = await _context.AttendanceRecords.FindAsync(id);
            if (record == null) return NotFound();

            record.CheckOutTime = DateTime.UtcNow;
            await _context.SaveChangesAsync();
            return NoContent();
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> Delete(int id)
        {
            var record = await _context.AttendanceRecords.FindAsync(id);
            if (record == null) return NotFound();
            _context.AttendanceRecords.Remove(record);
            await _context.SaveChangesAsync();
            return NoContent();
        }
    }
}
